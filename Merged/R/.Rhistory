describe_posterior(Dataset_Percent_baseline_MCMC)
describe_posterior(Dataset_Delta_baseline_MCMC)
plot_model(Dataset_Delta_baseline_MCMC, type = "pred", ci.lvl = .89, bpe.color = "red")
emmeans(Dataset_Delta_baseline_MCMC, specs = 'Dataset')
describe_posterior(Dataset_Percent_MCMC)
plot_model(Dataset_Percent_MCMC, type = "pred", ci.lvl = .89, bpe.color = "red")
emmeans(Dataset_Delta_baseline_MCMC, specs = 'Dataset')
describe_posterior(Dataset_Delta_baseline_MCMC)
plot_model(Dataset_Delta_baseline_MCMC, type = "pred", ci.lvl = .89, bpe.color = "red")
plot_model(Dataset_Delta_baseline_MCMC, bpe.color = "red")
Dataset_Delta_baseline_MCMC %>% summary
plot_model(Dataset_Delta_baseline_MCMC)
plot_model(Dataset_Delta_baseline_MCMC) + theme_sjplot()
a <- as.array(Dataset_Delta_baseline_MCMC)
a
library(bayesplot)
mcmc_intervals(a)
mcmc_intervals(a, pars = c('(Intercept)','dataset911','twovar_prev'))
mcmc_intervals(a, pars = c('(Intercept)','Dataset911','twovar_prev'))
a <-
mcmc_intervals(as.array(Dataset_Delta_baseline_MCMC), pars = c('(Intercept)','Dataset911','twovar_prev'))
mcmc_intervals(as.array(Dataset_Delta_baseline_MCMC), pars = c('(Intercept)','Dataset911','twovar_prev'))
describe_posterior(Dataset_Delta_baseline_MCMC)
Dataset_Delta_baseline_MCMC_weighted <- stan_glm(Bdev ~ Dataset + twovar_prev,
family = mgcv::betar, iter= niters, data = combined_percent,
weights = num_weights)
describe_posterior(Dataset_Delta_baseline_MCMC_weighted)
## Covid (unweighted and weighted results are qualitatively the same i.e., coef(Exp1) < coef(Exp2))
covid_BRem <- covid_wide %>% mutate(BCovid_Rem = beta_squeeze((Covid_Rem-1)/4)) %>%
filter(!is.na(BCovid_Rem))
Rem_covid_MCMC_weighted <- stan_glm(BCovid_Rem ~ Covid_Exp1 + Covid_Exp2,
family = mgcv::betar, iter= niters,
weights = num_weights_3var, data = covid_BRem)
describe_posterior(Rem_covid_MCMC_weighted)
plot_model(Rem_covid_MCMC_weighted, type = "pred", ci.lvl = .89, bpe.color = "red")
Rem_covid_MCMC_unweighted <- stan_glm(BCovid_Rem ~ Covid_Exp1 + Covid_Exp2,
family = mgcv::betar, iter= niters,
data = covid_BRem)
describe_posterior(Rem_covid_MCMC_unweighted)
describe_posterior(Rem_covid_MCMC_weighted)
## 911_T2 (unweighted and weighted results are qualitatively the same i.e., coef(Exp1) = coef(Exp2))
nine11_BRem_T2 <- nine11_wide_avg_T2 %>% mutate(B911_Rem = beta_squeeze((stress_memory-1)/4)) %>%
filter(!is.na(B911_Rem))
Rem_911_MCMC_T2_weighted <- stan_glm(B911_Rem ~ prev_experience + curr_experience,
family = mgcv::betar, iter= niters,
weights = num_weights, data = nine11_BRem_T2)
describe_posterior(Rem_911_MCMC_T2_weighted)
Rem_911_MCMC_T2_unweighted <- stan_glm(B911_Rem ~ prev_experience + curr_experience,
family = mgcv::betar, iter= niters,
data = nine11_BRem_T2)
describe_posterior(Rem_911_MCMC_T2_unweighted)
## Percent (avg over emotions) ~ Time
nine11_percent <- nine11_wide_avg %>% mutate(Percent = dev / prev_experience) %>%
mutate(time = relevel(factor(time), ref='2')) %>%
filter(!is.na(Percent))
## Percent (avg over emotions) ~ Time
nine11_percent <- nine11_long_avg %>% mutate(Percent = memdev / twovar_prev_experience) %>%
mutate(time = relevel(factor(time), ref='2')) %>%
filter(!is.na(Percent))
nine11_percent %>% group_by(time) %>%
summarise(mean=mean(Percent), sd=sd(Percent))
Time_avg_911_MCMC_weighted <- stan_glm(Percent ~ time,
family = 'gaussian', iter= niters,
weights = num_weights_updated,
data = nine11_percent)
describe_posterior(Time_avg_911_MCMC_weighted)
Time_avg_911_MCMC_unweighted <- stan_glm(Percent ~ time,
family = 'gaussian', iter= niters,
data = nine11_percent)
describe_posterior(Time_avg_911_MCMC_unweighted)
nine11_BRem <- nine11_long_avg %>% mutate(time = relevel(factor(time), ref='2')) %>%
group_by(time) %>% mutate(B911_Rem = beta_squeeze((stress_memory-1)/4)) %>%
filter(!is.na(B911_Rem))
Rem_911_MCMC_T2_weighted <- stan_glmer(B911_Rem ~ (prev_experience + curr_experience) * time + (1|Subject),
family = mgcv::betar, iter= niters,
weights = num_weights_updated, data = nine11_BRem)
Rem_911_MCMC_T2_unweighted <- stan_glmer(B911_Rem ~ (prev_experience + curr_experience) * time + (1|Subject),
family = mgcv::betar, iter= niters)
describe_posterior(Rem_911_MCMC_T2_weighted)
Rem_911_MCMC_T2_unweighted <- stan_glmer(B911_Rem ~ (prev_experience + curr_experience) * time + (1|Subject),
family = mgcv::betar, iter= niters, data = nine11_BRem)
describe_posterior(Rem_911_MCMC_T2_unweighted)
Rem_911_MCMC_T2_weighted <- stan_glmer(B911_Rem ~ (prev_experience + curr_experience) * time + (1|Subject),
family = mgcv::betar, iter= 20000,
weights = num_weights_updated, data = nine11_BRem)
describe_posterior(Rem_911_MCMC_T2_weighted)
?save
save(Rem_911_MCMC_T2_weighted, file = '~/Downloads/Rem_911_MCMC_weighted.RData')
## overestimation ~ delta emo well-being
covid_percent <- covid_wide %>% mutate(Percent = Covid_Dev / twovar_Covid_Exp1) %>% filter(!is.na(Percent))
covid_percent_EmoWell_MCMC <- stan_glm(Percent ~ emo_well_being_delta + twovar_Covid_Exp1,
family = "gaussian",
iter= niters, weights = num_weights_3var,
covid_percent)
covid_percent_EmoWell_MCMC_2 <- stan_glm(Percent ~ emo_well_being_delta + Covid_Exp1,
family = "gaussian",
iter= niters, weights = num_weights_3var,
covid_percent)
describe_posterior(covid_percent_EmoWell_MCMC)
describe_posterior(covid_percent_EmoWell_MCMC_1)
describe_posterior(covid_percent_EmoWell_MCMC_2)
covid_delta_EmoWell_MCMC <- stan_glm(Covid_Dev ~ emo_well_being_delta + Covid_Exp1,
family = "gaussian",
iter= niters, weights = num_weights_3var,
covid_percent)
describe_posterior(covid_delta_EmoWell_MCMC)
covid_delta_EmoWell_MCMC_both <- stan_glm(Covid_Dev ~ emo_well_being_delta + twovar_Covid_Exp1 + Covid_Exp2,
family = "gaussian",
iter= niters, weights = num_weights_3var,
covid_percent)
describe_posterior(covid_delta_EmoWell_MCMC_both)
covid_delta_EmoWell_MCMC_both <- stan_glm(Covid_Dev ~ emo_well_being_delta + twovar_Covid_Exp1 + Covid_Exp2,
family = "gaussian",
iter= niters,
covid_percent)
describe_posterior(covid_delta_EmoWell_MCMC_both)
covid_percent <- covid_wide %>% mutate(Percent = Covid_Dev / twovar_Covid_Exp1) %>% filter(!is.na(Percent))
nine11_percent_T2 <- nine11_long_avg_T2 %>% mutate(Percent = memdev / twovar_prev_experience) %>% filter(!is.na(Percent))
combined_percent <- covid_percent %>% dplyr::select(Subject, Percent, Covid_Dev, twovar_Covid_Exp1, num_weights_2var) %>%
rename(dev = Covid_Dev, twovar_prev = twovar_Covid_Exp1, num_weights = num_weights_2var) %>%
mutate(Dataset = 'Covid') %>%
rbind(
nine11_percent_T2 %>% dplyr::select(Subject, Percent, memdev, twovar_prev_experience, num_weights_updated) %>%
rename(dev = memdev, twovar_prev = twovar_prev_experience, num_weights = num_weights_updated) %>%
mutate(Dataset = '911')
) %>%
mutate(Dataset = relevel(factor(Dataset), ref = 'Covid')) %>%
group_by(Dataset) %>%
mutate(Bdev = beta_squeeze((dev+4)/8))
## 911
nine11_long_type <- nine11_long_avg_T2 %>%
mutate(B911_Exp1 = beta_squeeze((prev_experience-1)/4),
B911_Exp2 = beta_squeeze((curr_experience-1)/4),
B911_Rem = beta_squeeze((stress_memory-1)/4)) %>%
pivot_longer(cols = c('B911_Exp1', 'B911_Exp2','B911_Rem'),
names_to = 'MemType', values_to = 'BNegEmo') %>%
mutate(MemType = relevel(factor(MemType), ref='B911_Exp1')) %>%
filter(!is.na(BNegEmo))
#Number of 911 participants in case we also need it for SE
n_911_ppt <- length(unique(nine11_long_type$Subject)) #Calculate number of participants; 1430
#   sanity check: BNegEmo has been beta_squeezed
nine11_long_type %>% ggplot(aes(x=BNegEmo)) + geom_histogram(bins = 20) + facet_wrap(~MemType) # may worth noting that sanity check result for covid and 911 looks different
MemType_911_MCMC_T2 <- stan_glmer(BNegEmo ~ MemType + (1|Subject),
family = mgcv::betar, iter= niters, seed=seed_no,
data = nine11_long_type)
seed_no <- 1636
MemType_911_MCMC_T2 <- stan_glmer(BNegEmo ~ MemType + (1|Subject),
family = mgcv::betar, iter= niters, seed=seed_no,
data = nine11_long_type)
MemType_911_MCMC_T2 %>% describe_posterior
plot_model(Dataset_Delta_baseline_MCMC, type = "pred", ci.lvl = .95, bpe.color = "red")
emmeans(Dataset_Delta_baseline_MCMC, specs = 'Dataset') # Question for Johnny: why here it looks weird?; its averaging across twovar_prev -- thats what emmeans does, marginalizes across all other variables; use my log2probit thing to get probability
Dataset_Delta_baseline_MCMC %>% posterior_predict()
Dataset_Delta_baseline_MCMC %>% describe_posterior()
describe_posterior(Dataset_Percent_MCMC)
combined_percent$Bdev %>% hist
## set path
path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path)
## compile utils
source('utils.R')
#Load All MCMC objects
load(file = "./911nCovid_StressMemory_new.rda")
#Function to convert logodds to probability
logit2prob <- function(logit){
odds <- exp(logit)
prob <- odds / (1 + odds)
return(prob)
}
## read in data
covid_wide <-  read.csv('../data/Complete_test_Dev_Exp_Only_Data_Manipulation.csv') #each row is one observation, T1 and T2 separated by prefix in the colnmae
nine11_wide_avg <- read.csv('../data/df.emo.wide.avg_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is avg across emotions
nine11_wide <- read.csv('../data/df.emo.wide_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is specific to one emotion
nine11_long_avg <- read.csv('../data/df.emo.long.avg_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is avg across emotions
#  filter time2 data frome 911 to do shared analysis
nine11_long_avg_T2 <- nine11_long_avg %>% filter(time==2)
nine11_wide_T2 <- nine11_wide %>% dplyr::select(!ends_with('3') & !ends_with('4'))
## define var related to MCMC
niters <- 20000
seed_no <- 1636
#Posterior Predictive Check (Ppc)
y_Dataset_Delta_baseline_MCMC <- combined_percent$Bdev
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
Dataset_Delta_baseline_MCMC %>% describe_posterior()
Dataset_Delta_baseline_MCMC %>% summary
#Posterior Predictive Check (Ppc)
y_MemType_covid_MCMC<- covid_long_type$BStress
yrep_y_MemType_covid_MCMC <- posterior_predict(MemType_covid_MCMC, draws = 500)
#Posterior Predictive Check (Ppc)
class(Dataset_Delta_baseline_MCMC) <- c(class(Dataset_Delta_baseline_MCMC), 'betareg')
class(Dataset_Delta_baseline_MCMC)
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
posterior_predict(Dataset_Delta_baseline_MCMC)
yrep_Rem_911_MCMC_weighted <- posterior_predict(Rem_911_MCMC_weighted, draws = 500) #Broken but different error; presumably because multiple variables
ppc_dens_overlay(y_Rem_911_MCMC_weighted, yrep_Rem_911_MCMC_weighted[1:50, ])
#Posterior Predictive Check (Ppc)
y_Rem_911_MCMC_weighted <- nine11_BRem$B911_Rem
ppc_dens_overlay(y_Rem_911_MCMC_weighted, yrep_Rem_911_MCMC_weighted[1:50, ])
version('rstanarm')
?version
nine11_BRem <- nine11_long_avg %>% mutate(time = relevel(factor(time), ref='2')) %>%
group_by(time) %>% mutate(B911_Rem = beta_squeeze((stress_memory-1)/4)) %>%
filter(!is.na(B911_Rem))
#Posterior Predictive Check (Ppc)
y_Rem_911_MCMC_weighted <- nine11_BRem$B911_Rem
ppc_dens_overlay(y_Rem_911_MCMC_weighted, yrep_Rem_911_MCMC_weighted[1:50, ])
y_Rem_911_MCMC_weighted %>% dim
y_Rem_911_MCMC_weighted %>% length
yrep_Rem_911_MCMC_T2_unweighted <- posterior_predict(Rem_911_MCMC_T2_unweighted, draws = 500) #Broken, same error as previously
#Posterior Predictive Check (Ppc)
y_Rem_911_MCMC_T2_unweighted <- nine11_BRem$B911_Rem
ppc_dens_overlay(y_Rem_911_MCMC_T2_unweighted, yrep_Rem_911_MCMC_T2_unweighted[1:50, ])
y_covid_percent_EmoWell_MCMC <- covid_percent$Percent
yrep_covid_percent_EmoWell_MCMC <- posterior_predict(covid_percent_EmoWell_MCMC, draws = 500) #Broken
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
#Posterior Predictive Check (Ppc)
y_Dataset_Delta_baseline_MCMC <- combined_percent$Bdev
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
#Posterior Predictive Check (Ppc)
y_Dataset_Percent_MCMC<- combined_percent$Percent
yrep_Dataset_Percent_MCMC <- posterior_predict(Dataset_Percent_MCMC, draws = 500)
ppc_dens_overlay(y_Dataset_Percent_MCMC, yrep_Dataset_Percent_MCMC[1:50, ]) #Looks decent, less peaked, more dispersed than data
yrep_Dataset_Percent_MCMC %>% length
yrep_Dataset_Percent_MCMC[1:50, ] %>% length()
yrep_Dataset_Percent_MCMC[1:50, ] %>% dim
yrep_Dataset_Percent_MCMC %>% dim
combined_percent$Percent %>% dim
combined_percent$Percent %>% length
#Posterior Predictive Check (Ppc)
y_Dataset_Delta_baseline_MCMC <- combined_percent$Bdev
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
y_Dataset_Delta_baseline_MCMC %>% length
niters = 1000
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset + twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
#Posterior Predictive Check (Ppc)
y_Dataset_Delta_baseline_MCMC <- combined_percent$Bdev
test <- Dataset_Delta_baseline_MCMC
class(test)
sessionInfo()
set.seed(123)
data <- data.frame(y=rbeta(100,100,200),x=rnorm(100))
fit <- rstanarm::stan_glm("y~x",data=data,family=mgcv::betar(link="logit"), chain=1)
rstanarm::posterior_epred(fit, draws=100)
rstanarm::posterior_epred(fit, newdata=data.frame(x=1))
rstanarm::posterior_predict(fit, draws=100)
class(fit)
class(fit) <- c(class(fit), "betareg")
rstanarm::posterior_epred(fit, draws=100)
rstanarm::posterior_predictr(fit, draws=100)
rstanarm::posterior_predict(fit, draws=100)
combined_percent %>% glimpse
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset + twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent %>% mutate(Dataset = as.character(Dataset)))
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
test <- yrep_Dataset_Delta_baseline_MCMC
test <- Dataset_Delta_baseline_MCMC
class(test)
class(test) <- c(class(test),'betareg')
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(test, draws = 500) #DOESNT WORK, UNSURE WHY
Dataset_Delta_baseline_MCMC <- stan_glmer(Bdev ~ Dataset + twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent %>% mutate(Dataset = as.character(Dataset)))
covid_percent <- covid_wide %>% mutate(Percent = Covid_Dev / twovar_Covid_Exp1) %>% filter(!is.na(Percent))
nine11_percent_T2 <- nine11_long_avg_T2 %>% mutate(Percent = memdev / twovar_prev_experience) %>% filter(!is.na(Percent))
combined_percent <- covid_percent %>% dplyr::select(Subject, Percent, Covid_Dev, twovar_Covid_Exp1, num_weights_2var) %>%
rename(dev = Covid_Dev, twovar_prev = twovar_Covid_Exp1, num_weights = num_weights_2var) %>%
mutate(Dataset = 'Covid') %>%
rbind(
nine11_percent_T2 %>% dplyr::select(Subject, Percent, memdev, twovar_prev_experience, num_weights_updated) %>%
rename(dev = memdev, twovar_prev = twovar_prev_experience, num_weights = num_weights_updated) %>%
mutate(Dataset = '911')
) %>%
mutate(Dataset = relevel(factor(Dataset), ref = 'Covid')) %>%
group_by(Dataset) %>%
mutate(Bdev = beta_squeeze((dev+4)/8))
niters = 100
Dataset_Percent_MCMC <- stan_glm(Percent ~ Dataset, family = "gaussian", iter= niters, seed=seed_no,data = combined_percent)
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
niters = 1000
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset + twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
test <- Dataset_Delta_baseline_MCMC
class(test) <- c(class(test),'betareg')
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(test, draws = 500) #DOESNT WORK, UNSURE WHY
test %>% summary
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
Dataset_Delta_baseline_MCMC %>% summary
test <- Dataset_Delta_baseline_MCMC
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(test, draws = 500) #DOESNT WORK, UNSURE WHY
class(test) <- c(class(test),'betareg')
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(test, draws = 500) #DOESNT WORK, UNSURE WHY
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
class(Dataset_Delta_baseline_MCMC) <- c(class(Dataset_Delta_baseline_MCMC),'betareg')
class(Dataset_Delta_baseline_MCMC)
yrep_Dataset_Delta_baseline_MCMC <- posterior_predict(Dataset_Delta_baseline_MCMC, draws = 500) #DOESNT WORK, UNSURE WHY
yrep_Rem_covid_MCMC_weighted <- posterior_predict(Rem_covid_MCMC_weighted, draws = 500) #Also broken, IDK why; guessing multiple variables?
update.packages()
update.packages(ask=FALSE)
!exists("MemType_covid_MCMC")
MemType_covid_MCMC
!exists("Dataset_Percent_MCMC")
Dataset_Percent_MCMC
#Load All MCMC objects
load(file = "./911nCovid_StressMemory_new.rda")
## read in data
covid_wide <-  read.csv('../data/Complete_test_Dev_Exp_Only_Data_Manipulation.csv') #each row is one observation, T1 and T2 separated by prefix in the colnmae
nine11_wide_avg <- read.csv('../data/df.emo.wide.avg_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is avg across emotions
nine11_wide <- read.csv('../data/df.emo.wide_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is specific to one emotion
nine11_long_avg <- read.csv('../data/df.emo.long.avg_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is avg across emotions
#  filter time2 data frome 911 to do shared analysis
nine11_long_avg_T2 <- nine11_long_avg %>% filter(time==2)
nine11_wide_T2 <- nine11_wide %>% dplyr::select(!ends_with('3') & !ends_with('4'))
## define var related to MCMC
niters <- 20000
seed_no <- 1636
if (!exists("MemType_covid_MCMC")) {
MemType_covid_MCMC <- stan_glmer(BStress ~ MemType + (1|Subject),
family = mgcv::betar, iter= niters, seed=seed_no, data = covid_long_type)
}
if (!exists("MemType_911_MCMC_T2")) {
MemType_911_MCMC_T2 <- stan_glmer(BNegEmo ~ MemType + (1|Subject),
family = mgcv::betar, iter= niters, seed=seed_no,
data = nine11_long_type)
}
if (!exists("Dataset_Percent_MCMC")) {
Dataset_Percent_MCMC <- stan_glm(Percent ~ Dataset, family = "gaussian", iter= niters, seed=seed_no,data = combined_percent)
}
#Dataset_Percent_baseline_MCMC <- stan_glm(Percent ~ Dataset + twovar_prev, family = "gaussian", iter= niters, data = combined_percent)
if (!exists("Dataset_Delta_baseline_MCMC")) {
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset + twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
}
## compile utils
source('utils.R')
#Dataset_Percent_baseline_MCMC <- stan_glm(Percent ~ Dataset + twovar_prev, family = "gaussian", iter= niters, data = combined_percent)
if (!exists("Dataset_Delta_baseline_MCMC")) {
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset + twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
}
covid_percent <- covid_wide %>% mutate(Percent = Covid_Dev / twovar_Covid_Exp1) %>% filter(!is.na(Percent))
nine11_percent_T2 <- nine11_long_avg_T2 %>% mutate(Percent = memdev / twovar_prev_experience) %>% filter(!is.na(Percent))
## read in data
covid_wide <-  read.csv('../data/Complete_test_Dev_Exp_Only_Data_Manipulation.csv') #each row is one observation, T1 and T2 separated by prefix in the colnmae
nine11_wide_avg <- read.csv('../data/df.emo.wide.avg_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is avg across emotions
nine11_wide <- read.csv('../data/df.emo.wide_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is specific to one emotion
nine11_long_avg <- read.csv('../data/df.emo.long.avg_Only_Data_Manipulation.csv') #each row is one observation at one time point, stress_memory is avg across emotions
#  filter time2 data frome 911 to do shared analysis
nine11_long_avg_T2 <- nine11_long_avg %>% filter(time==2)
nine11_wide_T2 <- nine11_wide %>% dplyr::select(!ends_with('3') & !ends_with('4'))
## define var related to MCMC
niters <- 20000
seed_no <- 1636
covid_percent <- covid_wide %>% mutate(Percent = Covid_Dev / twovar_Covid_Exp1) %>% filter(!is.na(Percent))
nine11_percent_T2 <- nine11_long_avg_T2 %>% mutate(Percent = memdev / twovar_prev_experience) %>% filter(!is.na(Percent))
combined_percent <- covid_percent %>% dplyr::select(Subject, Percent, Covid_Dev, twovar_Covid_Exp1, num_weights_2var) %>%
rename(dev = Covid_Dev, twovar_prev = twovar_Covid_Exp1, num_weights = num_weights_2var) %>%
mutate(Dataset = 'Covid') %>%
rbind(
nine11_percent_T2 %>% dplyr::select(Subject, Percent, memdev, twovar_prev_experience, num_weights_updated) %>%
rename(dev = memdev, twovar_prev = twovar_prev_experience, num_weights = num_weights_updated) %>%
mutate(Dataset = '911')
) %>%
mutate(Dataset = relevel(factor(Dataset), ref = 'Covid')) %>%
group_by(Dataset) %>%
mutate(Bdev = beta_squeeze((dev+4)/8))
# sanity check: Percent looks like Gaussian
combined_percent %>% ggplot(aes(x=Percent)) + geom_histogram(bins = 100) + facet_wrap(~Dataset)
if (!exists("Dataset_Percent_MCMC")) {
Dataset_Percent_MCMC <- stan_glm(Percent ~ Dataset, family = "gaussian", iter= niters, seed=seed_no,data = combined_percent)
}
#Dataset_Percent_baseline_MCMC <- stan_glm(Percent ~ Dataset + twovar_prev, family = "gaussian", iter= niters, data = combined_percent)
if (!exists("Dataset_Delta_baseline_MCMC")) {
Dataset_Delta_baseline_MCMC <- stan_glm(Bdev ~ Dataset + twovar_prev, family = mgcv::betar, iter= niters, seed=seed_no, data = combined_percent)
}
if (!exists("Dataset_Delta_baseline_MCMC_betareg")) {
Dataset_Delta_baseline_MCMC_betareg <- stan_betareg(Bdev ~ Dataset + twovar_prev,
iter= niters, seed=seed_no, data = combined_percent)
}
if (!exists("Rem_covid_MCMC_weighted")) {
Rem_covid_MCMC_weighted <- stan_glm(BCovid_Rem ~ Covid_Exp1 + Covid_Exp2,
family = mgcv::betar, iter= niters,
weights = num_weights_3var, seed = seed_no, data = covid_BRem)
}
## Covid (unweighted and weighted results are qualitatively the same i.e., coef(Exp1) < coef(Exp2))
covid_BRem <- covid_wide %>% mutate(BCovid_Rem = beta_squeeze((Covid_Rem-1)/4)) %>%
filter(!is.na(BCovid_Rem)) %>% filter(!is.na(Covid_Exp1)) %>% filter(!is.na(Covid_Exp2))
if (!exists("Rem_covid_MCMC_weighted")) {
Rem_covid_MCMC_weighted <- stan_glm(BCovid_Rem ~ Covid_Exp1 + Covid_Exp2,
family = mgcv::betar, iter= niters,
weights = num_weights_3var, seed = seed_no, data = covid_BRem)
}
if (!exists("Rem_covid_MCMC_weighted_betareg")) {
Rem_covid_MCMC_weighted_betareg <- stan_betareg(BCovid_Rem ~ Covid_Exp1 + Covid_Exp2,
iter= niters,
weights = num_weights_3var, seed = seed_no, data = covid_BRem)
}
if (!exists("Rem_covid_MCMC_unweighted")) {
Rem_covid_MCMC_unweighted <- stan_glm(BCovid_Rem ~ Covid_Exp1 + Covid_Exp2,
family = mgcv::betar, iter= niters, seed = seed_no,
data = covid_BRem)
}
## 911_T2 (unweighted and weighted results are qualitatively the same i.e., coef(Exp1) = coef(Exp2))
nine11_BRem_T2 <- nine11_long_avg_T2 %>% mutate(B911_Rem = beta_squeeze((stress_memory-1)/4)) %>%
filter(!is.na(B911_Rem)) %>% filter(!is.na(prev_experience)) %>% filter(!is.na(curr_experience))
if (!exists("Rem_911_MCMC_T2_weighted")) {
Rem_911_MCMC_T2_weighted <- stan_glm(B911_Rem ~ prev_experience + curr_experience,
family = mgcv::betar, iter= niters, seed=seed_no,
weights = num_weights_updated, data = nine11_BRem_T2)
}
if (!exists("Rem_911_MCMC_T2_weighted_betareg")) {
Rem_911_MCMC_T2_weighted_betareg <- stan_glm(B911_Rem ~ prev_experience + curr_experience,
iter= niters, seed=seed_no,
weights = num_weights_updated, data = nine11_BRem_T2)
}
if (!exists("Rem_911_MCMC_T2_unweighted")) {
Rem_911_MCMC_T2_unweighted <- stan_glm(B911_Rem ~ prev_experience + curr_experience,
family = mgcv::betar, iter= niters, seed=seed_no,
data = nine11_BRem_T2)
}
## Percent (avg over emotions) ~ Time
nine11_percent <- nine11_long_avg %>% mutate(Percent = memdev / twovar_prev_experience) %>%
mutate(time = relevel(factor(time), ref='2')) %>%
filter(!is.na(Percent))
if (!exists("Time_avg_911_MCMC_weighted")) {
Time_avg_911_MCMC_weighted <- stan_glm(Percent ~ time,
family = 'gaussian', iter= niters,
weights = num_weights_updated, seed = seed_no,
data = nine11_percent)
}
if (!exists("Time_avg_911_MCMC_unweighted")) {
Time_avg_911_MCMC_unweighted <- stan_glm(Percent ~ time,
family = 'gaussian', iter= niters, seed = seed_no,
data = nine11_percent)
}
## Percent ~ Time * Emotion
nine11_wide_subj <- nine11_wide %>%
mutate(   n_experienced1 = sum(!is.na(experienced1)),
n_experienced2 = sum(!is.na(experienced2)),
n_experienced3 = sum(!is.na(experienced3)),
n_experienced4 = sum(!is.na(experienced4)),
n_remembered2 = sum(!is.na(remembered2)),
n_remembered3 = sum(!is.na(remembered3)),
n_remembered4 = sum(!is.na(remembered4)),
mean_memdev2_perc = memdev2 / experienced2,
mean_memdev3_perc = memdev3 / experienced3,
mean_memdev4_perc = memdev4 / experienced4)
nine11_wide_subj_percent <- nine11_wide_subj %>% dplyr::select(Subject, item, mean_memdev2_perc, mean_memdev3_perc, mean_memdev4_perc) %>%
pivot_longer(cols = mean_memdev2_perc:mean_memdev4_perc, names_to = 'MemTime', values_to = 'Percent') %>%
filter(!is.na(Percent)) %>% ungroup() %>%
mutate(item = relevel(factor(item), ref='frustration'))
if (!exists("StressOTEmo911_MCMC")) {
StressOTEmo911_MCMC <- stan_glmer(Percent ~ MemTime * item + (1|Subject),
family = "gaussian", iter= niters, seed=seed_no, data = nine11_wide_subj_percent)
}
nine11_BRem <- nine11_long_avg %>% mutate(time = relevel(factor(time), ref='2')) %>%
group_by(time) %>% mutate(B911_Rem = beta_squeeze((stress_memory-1)/4)) %>%
filter(!is.na(B911_Rem)) %>% filter(!is.na(prev_experience)) %>% filter(!is.na(curr_experience))
if (!exists("Rem_911_MCMC_weighted")) {
Rem_911_MCMC_weighted <- stan_glmer(B911_Rem ~ (prev_experience + curr_experience) * time + (1|Subject),
family = mgcv::betar, iter= niters, seed = seed_no,
weights = num_weights_updated, data = nine11_BRem)
}
if (!exists("Rem_911_MCMC_T2_unweighted")) {
Rem_911_MCMC_T2_unweighted <- stan_glmer(B911_Rem ~ (prev_experience + curr_experience) * time + (1|Subject),
family = mgcv::betar, seed= seed_no, iter= niters, data = nine11_BRem)
}
#Posterior Predictive Check (Ppc)
y_Rem_911_MCMC_T2_unweighted <- nine11_BRem$B911_Rem
## overestimation ~ delta emo well-being
covid_percent <- covid_wide %>%
mutate(BCovid_Dev = beta_squeeze((Covid_Dev+4)/8)) %>%
mutate(Percent = Covid_Dev / twovar_Covid_Exp1) %>% filter(!is.na(Percent))
if (!exists("covid_percent_EmoWell_MCMC")) {
covid_percent_EmoWell_MCMC <- stan_glm(Percent ~ emo_well_being_delta + twovar_Covid_Exp1,
family = "gaussian", seed = seed_no,
iter= niters, weights = num_weights_3var,
covid_percent)
}
if (!exists("covid_percent_EmoWell_MCMC_2")) {
covid_percent_EmoWell_MCMC_2 <- stan_glm(Percent ~ emo_well_being_delta + Covid_Exp1,
family = "gaussian", seed = seed_no,
iter= niters, weights = num_weights_3var,
covid_percent)
}
if (!exists("covid_delta_EmoWell_MCMC")) {
covid_delta_EmoWell_MCMC <- stan_glm(Covid_Dev ~ emo_well_being_delta + Covid_Exp1,
family = "gaussian", seed = seed_no,
iter= niters, weights = num_weights_3var,
covid_percent)
}
if (!exists("covid_delta_EmoWell_MCMC_both")) {
covid_delta_EmoWell_MCMC_both <- stan_glm(BCovid_Dev ~ emo_well_being_delta + twovar_Covid_Exp1 + Covid_Exp2,
family = mgcv::betar, seed = seed_no,
iter= niters, weights = num_weights_3var,
covid_percent)
}
if (!exists("covid_delta_EmoWell_MCMC_both_2var")) {
covid_delta_EmoWell_MCMC_both_2var <- stan_glm(BCovid_Dev ~ emo_well_being_delta + twovar_Covid_Exp1 + Covid_Exp2,
family = mgcv::betar, seed = seed_no,
iter= niters, weights = num_weights_2var,
covid_percent)
}
# save MCMC objects for plotting ------------------------------------------
save(MemType_covid_MCMC, MemType_911_MCMC_T2, Dataset_Percent_MCMC, Dataset_Delta_baseline_MCMC,
Dataset_Delta_baseline_MCMC_betareg,
Rem_covid_MCMC_weighted, Rem_covid_MCMC_weighted_betareg,
Rem_911_MCMC_T2_weighted, Rem_911_MCMC_T2_weighted_betareg,
Time_avg_911_MCMC_weighted,
Time_avg_911_MCMC_unweighted, StressOTEmo911_MCMC, Rem_911_MCMC_weighted,
Rem_911_MCMC_T2_unweighted, covid_PCA_MCMC, covid_percent_EmoWell_MCMC,
covid_percent_EmoWell_MCMC_2, covid_delta_EmoWell_MCMC, covid_delta_EmoWell_MCMC_both,
covid_delta_EmoWell_MCMC_both_2var, file = "./911nCovid_StressMemory_new.rda")
